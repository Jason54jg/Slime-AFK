const { randomizeTimer, Timers } = require('../utils/timerManager');
const { sendWebhookLog } = require('../utils/webhookLogger');

function createMessageHandler(bot, log, config) {
  return async function handleMessage(event) {
    const message = event.toString().trim();

    // Always log the message first if logAllMessages is enabled
    if (config.bot.logAllMessages) {
      await log(message);
    }

    // Server status messages
    if (message.endsWith(' the lobby!') || message.endsWith(' the lobby! <<<')) {
      await log("D√©tect√© dans le lobby, envoi vers Skyblock...");
      setTimeout(() => {
        bot.chat("/skyblock");
        log("Commande /skyblock envoy√©e");
      }, randomizeTimer(Timers.SKYBLOCK));
      await sendWebhookLog('üîÑ Redirection vers le lobby', 'info');
    }

    if (message.includes("You were spawned in Limbo.")) {
      await log("Spawn dans le Limbo, tentative de reconnexion...");
      await sendWebhookLog('‚úÖ Spawn dans le Limbo r√©ussi', 'success');
      setTimeout(() => {
        bot.chat("/skyblock");
        log("Commande /skyblock envoy√©e depuis le Limbo");
      }, randomizeTimer(Timers.RECONNECT_SHORT));
    }

    // Connection issues
    if (message.includes("An exception occurred in your connection") || message.includes("Out of sync")) {
      await log(`Probl√®me de connexion au serveur (${bot.username})`);
      await sendWebhookLog('‚ö†Ô∏è Probl√®me de connexion d√©tect√©', 'warning');
      setTimeout(() => {
        bot.chat("/skyblock");
        log("Tentative de reconnexion - /skyblock");
      }, randomizeTimer(Timers.RECONNECT_LONG));
      setTimeout(() => {
        bot.chat("/visit " + config.visit.username);
        log("Tentative de visite apr√®s reconnexion");
      }, randomizeTimer(Timers.VISIT_LONG));
    }

    // Server restart messages
    if (message.includes("[Important] This server will restart soon: Scheduled Restart")) {
      await log(`[Important] Ce serveur va bient√¥t red√©marrer: Red√©marrage planifi√© (${bot.username})`);
      await sendWebhookLog('üîÑ Red√©marrage planifi√© du serveur', 'warning');
      setTimeout(() => {
        bot.chat("/skyblock");
        log("Pr√©paration au red√©marrage - /skyblock");
      }, randomizeTimer(Timers.RECONNECT_LONG));
      setTimeout(() => {
        bot.chat("/visit " + config.visit.username);
        log("Pr√©paration au red√©marrage - /visit");
      }, randomizeTimer(Timers.VISIT_LONG));
    }

    // Teleportation messages
    if (message.includes("Warping...") || message.includes("Sending to server")) {
      await log(`T√©l√©portation en cours... (${bot.username})`);
      await sendWebhookLog('üîÑ T√©l√©portation en cours', 'info');
      setTimeout(() => {
        bot.chat("/visit " + config.visit.username);
        log("Nouvelle tentative de visite apr√®s t√©l√©portation");
      }, randomizeTimer(Timers.VISIT_SHORT));
    }

    if (message.includes("Warping you to your SkyBlock island...")) {
      await log(`T√©l√©portation vers l'√Æle SkyBlock (${bot.username})`);
      await sendWebhookLog('üèùÔ∏è T√©l√©portation vers l\'√Æle SkyBlock', 'info');
      setTimeout(() => {
        bot.chat("/visit " + config.visit.username);
        log("Tentative de visite apr√®s arriv√©e sur l'√Æle");
      }, randomizeTimer(Timers.VISIT_SHORT));
    }
  };
}

module.exports = {
  createMessageHandler
};