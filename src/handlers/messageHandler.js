const { randomizeTimer, Timers } = require('../utils/timerManager');
const { sendWebhookLog } = require('../utils/webhookLogger');

function createMessageHandler(bot, log, config, connectionManager) {
    return async function handleMessage(event) {
        if (!connectionManager.canPerformAction()) return;

        const message = event.toString().trim();

        if (config.bot.logAllMessages) {
            await log(message);
        }

        if (message.endsWith(' the lobby!') || message.endsWith(' the lobby! <<<')) {
            await log("D√©tect√© dans le lobby, envoi vers Skyblock...");
            setTimeout(() => {
                if (connectionManager.canPerformAction()) {
                    bot.chat("/skyblock");
                    log("Commande /skyblock envoy√©e");
                }
            }, randomizeTimer(Timers.SKYBLOCK));
            await sendWebhookLog('üîÑ Redirection vers le lobby', 'info');
        }

        if (message.includes("You were spawned in Limbo.")) {
            await log("Spawn dans le Limbo, tentative de reconnexion...");
            await sendWebhookLog('‚úÖ Spawn dans le Limbo r√©ussi', 'success');
            setTimeout(() => {
                if (connectionManager.canPerformAction()) {
                    bot.chat("/skyblock");
                    log("Commande /skyblock envoy√©e depuis le Limbo");
                }
            }, randomizeTimer(Timers.RECONNECT_SHORT));
        }

        if (message.includes("An exception occurred in your connection") ||
            message.includes("Out of sync")) {
            await log(`Probl√®me de connexion au serveur (${bot.username})`);
            await sendWebhookLog('‚ö†Ô∏è Probl√®me de connexion d√©tect√©', 'warning');
        }

        if (message.includes("[Important] This server will restart soon: Scheduled Restart")) {
            await log(`[Important] Ce serveur va bient√¥t red√©marrer: Red√©marrage planifi√© (${bot.username})`);
            await sendWebhookLog('üîÑ Red√©marrage planifi√© du serveur', 'warning');
        }

        if (message.includes("Warping...") || message.includes("Sending to server")) {
            await log(`T√©l√©portation en cours... (${bot.username})`);
            await sendWebhookLog('üîÑ T√©l√©portation en cours', 'info');
            setTimeout(() => {
                if (connectionManager.canPerformAction()) {
                    bot.chat("/visit " + config.visit.username);
                    log("Nouvelle tentative de visite apr√®s t√©l√©portation");
                }
            }, randomizeTimer(Timers.VISIT_SHORT));
        }

        if (message.includes("Warping you to your SkyBlock island...")) {
            await log(`T√©l√©portation vers l'√Æle SkyBlock (${bot.username})`);
            await sendWebhookLog('üèùÔ∏è T√©l√©portation vers l\'√Æle SkyBlock', 'info');
            setTimeout(() => {
                if (connectionManager.canPerformAction()) {
                    bot.chat("/visit " + config.visit.username);
                    log("Tentative de visite apr√®s arriv√©e sur l'√Æle");
                }
            }, randomizeTimer(Timers.VISIT_SHORT));
        }
    };
}

module.exports = {
    createMessageHandler
};